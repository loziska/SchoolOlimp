def count_valid_strings(N):
    if N == 0:
        return 0
    # Инициализация для n=1: "0" и "1" — оба допустимы
    ending_with_0 = 1
    ending_with_1 = 1
    
    for i in range(2, N + 1):
        # Новые значения:
        new_ending_with_0 = ending_with_0 + ending_with_1  # к любой можно добавить 0
        new_ending_with_1 = ending_with_0                   # только к оканчивающейся на 0 можно добавить 1
        
        # Обновляем значения для следующей итерации
        ending_with_0, ending_with_1 = new_ending_with_0, new_ending_with_1
    
    return ending_with_0 + ending_with_1

# Ввод числа N
N = int(input("Введите длину цепочки N: "))
print(count_valid_strings(N))

# Объяснение:
# Базовый случай:
# При N = 1 возможны цепочки "0" и "1" → ответ 2.
# Динамическое программирование:
# ending_with_0 — количество цепочек длины i, оканчивающихся на 0.
# ending_with_1 — количество цепочек длины i, оканчивающихся на 1.

# Рекуррентные соотношения:
# К цепочке, оканчивающейся на 0, можно добавить 0 или 1.
# К цепочке, оканчивающейся на 1, можно добавить только 0 (иначе будут две 1 подряд).

# Ответ:
# Сумма всех цепочек длины N, оканчивающихся на 0 или 1.

# Примеры:
# Вход: N = 3
# Выход: 5
# (Возможные цепочки: 000, 001, 010, 100, 101)
# Вход: N = 4
# Выход: 8
# (Допустимые варианты: 0000, 0001, 0010, 0100, 0101, 1000, 1001, 1010)
